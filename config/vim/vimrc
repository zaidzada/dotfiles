" -----------------------------------------------------------------------------
" > XDG Support
" -----------------------------------------------------------------------------

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')

if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif

" -----------------------------------------------------------------------------
" > Basic settings
" -----------------------------------------------------------------------------

set encoding=utf-8      " Use UTF-8
set hidden

set number              " Display numbering on the left
set relativenumber      " Numbering is relative to current line

set autoread            " Re-read buffer if file is changed outside
set lazyredraw          " Don't redraw when typing macros, commands, etc.

" Status bar settings
set laststatus=2        " Always display a status bar
set ruler               " Display current cursor position in status bar
set showmode            " Display current mode in status bar
set showcmd             " Display an incomplete command in status bar
set shortmess+=r        " Use shorter message for [readonly] in status bar
set wildmenu            " Enable command line completion

" Search and history
set incsearch           " Display the match of a search pattern while typing it
set hlsearch            " Highlight matches of the last used search pattern
set history=1000        " Expand history size
set ignorecase          " Ignore case on searches
set smartcase           " Don't ignore case if search includs an uppercase

" Window actions
set splitright          " Split vertically to the right
set splitbelow          " Split horizontally to the bottom
set display+=lastline   " Show as much as possible of the last line

" Cursor settings
" set cursorline          " Highlight current line with a horizontal line
set scrolloff=2         " Number of lines to keep above and below the cursor
set sidescrolloff=2     " Number of lines to keep above and below the cursor
set nostartofline       " On movement, keep cursor in same column if possible

" Text options
set nowrap              " Disable wrapping of lines
set nojoinspaces        " Only use one space after . ! and ?
set ttimeoutlen=0       " Don't wait for escape codes in insert mode
set formatoptions+=j    " Delete comment character when joining commented lines
set synmaxcol=800       " Column limit for syntaxing lines

" Security and encryption
set nomodeline          " Disable mode line for security reasons
if !has('nvim')
set cm=blowfish2        " Strong encryption (7.4.3+)
endif

" Display unprintable characters (whitespace), npbsp:  
set list listchars=tab:»\ ,trail:·,precedes:·,nbsp:⌴


" Set cursor style depending on mode
if &term =~ '^xterm'
    let &t_SI .= "\<Esc>[4 q"
    let &t_EI .= "\<Esc>[2 q"
endif


" -----------------------------------------------------------------------------
" > Indentation
" -----------------------------------------------------------------------------

" This is the default for all our files: use 4 spaces over tabs.
set expandtab           " Always expands tabs into spaces
set tabstop=8           " A tab is _always_ worth 8 spaces
set shiftwidth=4        " For <<, >>, and ==. And for autoindent
set softtabstop=4       " Insert this many spaces instead of a tab
set autoindent          " Use the indent of the previous line on the new line
set backspace=2         " Allow backspacing over indent, eol, and start
set smarttab            " Use 'softtabstop' spaces to insert everywhere but ^

syntax enable           " Use syntax highlighting
filetype indent on      " Use filetype-specific indentation
filetype plugin on      " Use filetype-specific plugins


" -----------------------------------------------------------------------------
" > File specifics
" -----------------------------------------------------------------------------

augroup markdown
    autocmd!
    autocmd FileType markdown setlocal spell wrap
    autocmd FileType markdown nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
    autocmd FileType markdown nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
augroup END

augroup make
    autocmd!
    autocmd FileType make setlocal foldexpr=getline(v:lnum)=~'^[a-z0-9\-_]'?'>1':1 foldmethod=expr
augroup END

augroup tex
    autocmd!
    autocmd FileType tex setlocal spell
augroup END


" -----------------------------------------------------------------------------
" > Key bindings
" -----------------------------------------------------------------------------

let mapleader = ","

" Toggle options
nnoremap cos :setlocal spell!<CR>
nnoremap cop :setlocal paste!<CR>
nnoremap col :setlocal list!<CR>
nnoremap cow :setlocal wrap!<CR>
nnoremap coi :setlocal ignorecase!<CR>
nnoremap con :setlocal number!<CR>
nnoremap cor :setlocal relativenumber!<CR>
nnoremap coh :setlocal hlsearch!<CR>
nnoremap coe :set cursorline!<CR>
nnoremap coc :set cursorcolumn!<CR>
nnoremap cod :<C-R>=&diff ? "diffoff" : "diffthis"<CR><CR>
nnoremap cov :set <C-R>=(&virtualedit =~# "all") ? "virtualedit-=all" : "virtualedit+=all"<CR><CR>
nnoremap cob :set background=<C-R>=&background == "dark" ? "light" : "dark"<CR><CR>
nnoremap com :exec &mouse!=""? "set mouse=" : "set mouse=a"<CR>

" Buffer commands
nnoremap gb :buffer<Space>
nnoremap gB :ls<CR>:buffer<Space>
nnoremap BB :b#<CR>
nnoremap BD :bd<CR>
nnoremap <C-J> :bnext<CR>
nnoremap <C-K> :bprev<CR>
inoremap <C-J> <C-O>:bnext<CR>
inoremap <C-K> <C-O>:bprev<CR>
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprev<CR>

" Stay in visual mode when indenting
vnoremap > >gv
vnoremap < <gv
vnoremap . :normal .<CR>

"Line operations
nnoremap H ^
nnoremap L $
nnoremap Y y$<CR>
nnoremap <silent> dJ :+1d<CR>k
nnoremap <silent> dK :-1d<CR>
nnoremap <silent> ]<Space> :pu! _<CR>:']+1<CR>
nnoremap <silent> [<Space> :pu _<CR>:'[-1<CR>

" Folding
nnoremap <silent> [z zj
nnoremap <silent> ]z zk
vnoremap <Space> zf
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
nnoremap \" :setlocal foldexpr=getline(v:lnum)=~'^\"\ >'?'>1':1 foldmethod=expr<CR>
nnoremap \# :setlocal foldexpr=getline(v:lnum)=~'^#\ >'?'>1':1 foldmethod=expr<CR>
nnoremap \% :setlocal foldexpr=getline(v:lnum)=~'^%\ >'?'>1':1 foldmethod=expr<CR>
nnoremap \z :setlocal foldexpr=(getline(v:lnum)=~@/)?'>1':1 foldmethod=expr<CR>

" Convenient insert mode mappings
inoremap <silent> <C-A> <C-O>0
inoremap <silent> <C-E> <C-O>$
inoremap <silent> <C-F> <C-O>l
inoremap <silent> <C-B> <C-O>h
inoremap <silent> <C-D> <C-O>D

" Quickfix commands
nnoremap [q :cnext<CR>
nnoremap ]q :cprevious<CR>
nnoremap [Q :cfirst<CR>
nnoremap ]Q :clast<CR>
nnoremap [l :lnext<CR>
nnoremap ]l :lprevious<CR>
nnoremap [L :lfirst<CR>
nnoremap ]L :llast<CR>
nnoremap [t :tnext<CR>
nnoremap ]t :tprevious<CR>
nnoremap [T :tfirst<CR>
nnoremap ]T :tlast<CR>
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Matching tools
nmap MM M1
nnoremap <silent> M1 :match InterestingWord1 /<C-R><C-W>/<CR>
nnoremap <silent> M2 :2match InterestingWord2 /<C-R><C-W>/<CR>
nnoremap <silent> M3 :3match InterestingWord3 /<C-R><C-W>/<CR>
nnoremap <silent> Mcc :call clearmatches()<CR>
nnoremap <silent> Mc1 :match none<CR>
nnoremap <silent> Mc2 :2match none<CR>
nnoremap <silent> Mc3 :3match none<CR>

" Misc
nnoremap * *<C-O>
nnoremap Q @@
nnoremap V v$
nnoremap U :update<CR><CR>
nnoremap dL :%s/\s\+$//e<CR>

" Highlighting
nnoremap <Leader>c :noh<CR>
nnoremap <C-L> :let @/ = ""<CR>
inoremap <C-L> <C-O>:let @/ = ""<CR>

" Plugin shortcuts
nnoremap <silent> gG :Git<CR>
nnoremap <silent> gE :NERDTreeToggle<CR>

" .vimrc editing and reloading
nnoremap <leader>ve :e $MYVIMRC<CR>
nnoremap <leader>vv :source $MYVIMRC<CR>


" -----------------------------------------------------------------------------
" > Functions
" -----------------------------------------------------------------------------

" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()

nnoremap <silent> <Leader>z :ZoomToggle<CR>


" -----------------------------------------------------------------------------
" > Plugin definition and configurations
" -----------------------------------------------------------------------------

call plug#begin($XDG_DATA_HOME.'/vim/plugged')

call plug#end()

if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
