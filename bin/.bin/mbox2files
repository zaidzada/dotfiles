#!/usr/bin/env python
'''
Extract pictures from .mbox files
- TODO google convention for camelCase or what

video/{mp4,quicktime}, audio/mpeg, multipart/mixed, application/octet-stream
'message/delivery-status', 'text/rfc822-headers'

'''

import argparse
import logging
import mailbox
from datetime import datetime
from email import message_from_binary_file, policy
from os import makedirs
from os.path import join as pjoin


def parse_message_date(message):
    date_str = message['Date']
    try:
        date = datetime.strptime(date_str, '%a, %d %b %Y %H:%M:%S %z')
    except ValueError:
        date = datetime.strptime(date_str[:-6], '%a, %d %b %Y %H:%M:%S %z')

    return date


def make_EmailMessage(f):
    """Factory to create EmailMessage objects instead of Message objects"""
    return message_from_binary_file(f, policy=policy.default)


def main(args):
    logging.info('Loading mailbox %s.', args.mailbox)
    mail = mailbox.mbox(args.mailbox, factory=make_EmailMessage)

    for key, message in mail.iteritems():

        if not message.is_multipart():
            continue

        message_labels = message.get('X-Gmail-Labels')
        if args.labels is not None and message_labels is not None:
            labels = set(args.labels)
            if len(labels & set(message_labels.split(','))) == 0:
                continue

        date = parse_message_date(message)
        dir_name = date.strftime('%Y-%m-%d_%H:%M:%S')

        # Save attachments
        for i, part in enumerate(message.iter_attachments()):
            # MIME spec: type/subtype;param=value
            params = part.get_params()
            mime_type, mime_subtype = params[0][0].split('/')
            if mime_type in args.content_types:
                makedirs(dir_name, exist_ok=True)

                data = part.get_payload(decode=True)
                name = f'attachment-{i}.{mime_subtype}'
                if len(params) > 1 and params[1][0] == 'name':
                    name = params[1][1]

                logging.debug('Saving attachment %s.', name)
                with open(pjoin(dir_name, name), 'wb') as fp:
                    fp.write(data)

        # Write out metadata
        # with open(pjoin(dir_name, 'metadata.json'), 'w') as fp:
        #     metadata = {
        #         'key': key,
        #         'date': date.isoformat(),
        #         'from': message['From'],
        #         'subject': message['Subject'],
        #     }

        #     json.dump(metadata, fp, indent=4)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('-l', '--labels', nargs='+', type=str, default=None)
    # IANA types: application audio example font image model text video
    parser.add_argument('-c',
                        '--content-types',
                        nargs='+',
                        type=str,
                        default=['video', 'audio', 'image'])
    parser.add_argument('mailbox', type=str)
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)

    args.keys = [
        'Message-ID', 'Date', 'From', 'Delivered-To', 'To', 'In-Reply-To',
        'Subject', 'Content-Type', 'X-Gmail-Labels'
    ]

    main(args)
